###
## General options
replicas: 1
updateStrategy: RollingUpdate

## The Data Transport Layer (DTL)
dtl:
  ## Set default image, imageTag, and imagePullPolicy.
  ##
  image:
    repository: ethereumoptimism/data-transport-layer
    tag: 0.5.20
    pullPolicy: IfNotPresent

  environment:
    # General options
    DATA_TRANSPORT_LAYER__NODE_ENV: production
    # Leave blank during local development
    DATA_TRANSPORT_LAYER__ETH_NETWORK_NAME: mainnet
    DATA_TRANSPORT_LAYER__ADDRESS_MANAGER:
    DATA_TRANSPORT_LAYER__POLLING_INTERVAL: "5000"
    DATA_TRANSPORT_LAYER__DANGEROUSLY_CATCH_ALL_ERRORS: "true"
    DATA_TRANSPORT_LAYER__CONFIRMATIONS: "12"

    # Server options
    DATA_TRANSPORT_LAYER__SERVER_HOSTNAME: 0.0.0.0

    # Set to "true" if you want to sync confirmed transactions from L1 (Ethereum).
    # You probably want to set this to "true".
    DATA_TRANSPORT_LAYER__SYNC_FROM_L1: "true"
    DATA_TRANSPORT_LAYER__L1_RPC_ENDPOINT:
    DATA_TRANSPORT_LAYER__L1_START_HEIGHT: "13596466"
    DATA_TRANSPORT_LAYER__LOGS_PER_POLLING_INTERVAL: "2000"

    # Set to "true" if you want to sync unconfirmed transactions from a sequencer.
    # Make sure to fill in the below values if you intend to do so.
    DATA_TRANSPORT_LAYER__SYNC_FROM_L2: "false"
    DATA_TRANSPORT_LAYER__L2_RPC_ENDPOINT: "https://mainnet.optimism.io"
    DATA_TRANSPORT_LAYER__TRANSACTIONS_PER_POLLING_INTERVAL: "1000"
    DATA_TRANSPORT_LAYER__L2_CHAIN_ID: "10"
    DATA_TRANSPORT_LAYER__LEGACY_SEQUENCER_COMPATIBILITY: "false"

  mountPath: "/root/db"
  persistence:
    storageClass: ""
    VolumeName: ""
    accessMode: ReadWriteOnce
    size: ""
  service:
    type: ClusterIP
    dtl:
      port: "7878"
    annotations: {}
  ## Node labels for pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  tolerations: []
  affinity: {}

  # Additational pod annotations
  podAnnotations: {}

  # Additional pod labels
  podLabels: {}

## The Optimism client software (l2geth)
l2geth:
  ## Set default image, imageTag, and imagePullPolicy.
  ##
  image:
    repository: ethereumoptimism/l2geth
    tag: 0.5.12
    pullPolicy: IfNotPresent
  extraArgs:
    --vmodule: eth/*=5,miner=4,rpc=5,rollup=4,consensus/clique=1
    --allow-insecure-unlock:
    --unlock: "0x00000398232E2064F896018496b4b44b3D62751F"
    --mine:
    --miner.etherbase: "0x00000398232E2064F896018496b4b44b3D62751F"
  environment:
    CHAIN_ID: "10"
    NETWORK_ID: "10"
    NO_DISCOVER: "true"
    NO_USB: "true"
    GASPRICE: "0"
    GCMODE: archive
    BLOCK_SIGNER_ADDRESS: "0x00000398232E2064F896018496b4b44b3D62751F"
    BLOCK_SIGNER_PRIVATE_KEY: "6587ae678cf4fc9a33000cdbf9f35226b71dcc6a4684a31203241f9bcfd55d27"
    BLOCK_SIGNER_PRIVATE_KEY_PASSWORD: "pwd"
    ETH1_CTC_DEPLOYMENT_HEIGHT: "13596466"
    ETH1_SYNC_SERVICE_ENABLE: "true"
    ROLLUP_ADDRESS_MANAGER_OWNER_ADDRESS: "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A"
    ROLLUP_DISABLE_TRANSFERS: "false"
    ROLLUP_ENABLE_L2_GAS_POLLING: "false"
    ROLLUP_GAS_PRICE_ORACLE_OWNER_ADDRESS: "0x648E3e8101BFaB7bf5997Bd007Fb473786019159"
    ROLLUP_MAX_CALLDATA_SIZE: "40000"
    ROLLUP_POLL_INTERVAL_FLAG: "1s"
    ROLLUP_SYNC_SERVICE_ENABLE: "true"
    ROLLUP_TIMESTAMP_REFRESH: "5m"
    ROLLUP_VERIFIER_ENABLE: "true"
    RPC_ADDR: "0.0.0.0"
    RPC_API: "eth,rollup,net,web3,debug"
    RPC_CORS_DOMAIN: "*"
    RPC_ENABLE: "true"
    RPC_PORT: "8545"
    RPC_VHOSTS: "*"
    TARGET_GAS_LIMIT: "15000000"
    USING_OVM: "true"
    WS_ADDR: "0.0.0.0"
    WS_API: "eth,rollup,net,web3,debug"
    WS_ORIGINS: "*"
    WS: "true"
    ROLLUP_BACKEND: "l1"
    L2GETH_GENESIS_URL: "https://storage.googleapis.com/optimism/mainnet/genesis-berlin.json"
    L2GETH_GENESIS_HASH: "0x106b0a3247ca54714381b1109e82cc6b7e32fd79ae56fbcc2e7b1541122f84ea"
    L2GETH_BERLIN_ACTIVATION_HEIGHT: "3950000"
  mountPath: "/root/gethData"
  persistence:
    storageClass: ""
    VolumeName: ""
    accessMode: ReadWriteOnce
    size: ""
  service:
    type: ClusterIP
    rpc:
      port: "8545"
    annotations: {}

  ## Node labels for pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  tolerations: []
  affinity: {}

  # Additational pod annotations
  podAnnotations: {}

  # Additional pod labels
  podLabels: {}

## Configure sidecarContainers based on the documentation here: https://kubernetes.io/docs/concepts/workloads/pods/
##

sidecarContainers: {}

## Enable proxy
##
proxy:
  enabled: false
  port: "8080"
  image: "nginx:1.20.2"
  pullPolicy: IfNotPresent
  resources: {}
  logFormat: []
    #- '"$remote_addr" - "$remote_user" [$time_iso8601] "$request" '
    #- '"$status" "$body_bytes_sent" "$http_referer" '
    #- '"$http_user_agent" '
    #- 'rt="$request_time" urt="$upstream_response_time" '
  serverConfig: []
    #-  proxy_read_timeout 3600;
    #-  client_body_in_single_buffer on;
    #-  client_body_buffer_size 16k;
    #-  proxy_buffers 16 16k;
    #-  proxy_buffer_size 16k;


## Configure Ingress based on the documentation here: https://kubernetes.io/docs/concepts/services-networking/ingress/
##

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

serviceAccount:
  create: true
  ## The name of the service account to use. If 'create' is 'true', a service account with that name
  ## will be created. Otherwise, a name will be auto-generated.
  name:

## Pod priority settings
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""
