{{- /* Support both: new persistence.volumes[] and legacy flat keys */ -}}
{{- $pvols := .Values.persistence.volumes | default (list) -}}
{{- if and .Values.persistence.enabled (empty $pvols) -}}
  {{- $legacy := dict
        "name"         (default "data" .Values.persistence.VolumeName)
        "mountPath"    (default "/data" .Values.persistence.mountPath)
        "size"         .Values.persistence.size
        "accessModes"  (list (default "ReadWriteOnce" .Values.persistence.accessMode))
        "storageClass"  .Values.persistence.storageClass
      -}}
  {{- $pvols = append $pvols $legacy -}}
{{- end -}}

apiVersion: {{ template "simple-node.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ template "simple-node.fullname" . }}
  labels:
    {{- include "simple-node.labels" . | nindent 4 }}
spec:
  updateStrategy:
    type: {{ .Values.updateStrategy }}
  podManagementPolicy: "Parallel"
  serviceName: {{ template "simple-node.fullname" . }}
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{- include "simple-node.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      name: {{ template "simple-node.fullname" . }}
      labels:
        {{- include "simple-node.labels" . | nindent 8 }}
{{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | indent 8 }}
{{- end }}
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | trimSuffix "\n" | indent 8 }}
{{- end }}
    spec:
      {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{- end }}
      serviceAccountName: {{ include "simple-node.serviceAccountName" . | quote }}
      {{- if .Values.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}

      {{- if and .Values.config.enabled (eq .Values.config.mode "copy") }}
      initContainers:
        - name: copy-config
          image: busybox
          command:
            - sh
            - -c
            - >
              mkdir -p $(dirname {{ .Values.config.targetPath }}) &&
              cp -f {{ .Values.config.mountPath | default "/tmp/bitcoin.conf" }} {{ .Values.config.targetPath }}
          volumeMounts:
            {{- if and .Values.persistence.enabled $pvols }}
            {{- range $v := $pvols }}
            - name: {{ $v.name }}
              mountPath: {{ $v.mountPath }}
              {{- if $v.subPath }}
              subPath: {{ $v.subPath }}
              {{- end }}
            {{- end }}
            {{- end }}
            - name: config
              mountPath: {{ .Values.config.mountPath | default "/tmp/bitcoin.conf" }}
              subPath: config
              readOnly: true
      {{- end }}

      containers:
        {{- if .Values.sidecarContainers }}
        {{- toYaml .Values.sidecarContainers | nindent 8 }}
        {{- end }}
        - name: {{ include "simple-node.app" . }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.command }}
          command:
{{ toYaml .Values.command | indent 12 }}
          {{- end }}
          {{- if .Values.args }}
          args:
{{ toYaml .Values.args | indent 12 }}
          {{- end }}
          {{- if .Values.environment }}
          env:
            {{- range $key, $val := .Values.environment }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end }}
          {{- end }}
          {{- if .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          {{- end }}
          ports:
          {{- range .Values.service.ports }}
            - name: {{ .name }}
              containerPort: {{ .targetPort | default .port }}
              protocol: {{ .protocol | default "TCP" }}
          {{- end }}
          {{- if .Values.containerPorts }}
{{ toYaml .Values.containerPorts | indent 12 }}
          {{- end }}

          {{- with .Values.probes.livenessProbe }}
          livenessProbe:
{{ toYaml . | indent 12 }}
          {{- end }}
          {{- with .Values.probes.readinessProbe }}
          readinessProbe:
{{ toYaml . | indent 12 }}
          {{- end }}
          {{- with .Values.probes.startupProbe }}
          startupProbe:
{{ toYaml . | indent 12 }}
          {{- end }}

          resources:
{{ toYaml .Values.resources | indent 12 }}

          {{- if or .Values.persistence.enabled .Values.config.enabled }}
          volumeMounts:
            {{- if and .Values.persistence.enabled $pvols }}
            {{- range $v := $pvols }}
            - name: {{ $v.name }}
              mountPath: {{ $v.mountPath }}
              {{- if $v.subPath }}
              subPath: {{ $v.subPath }}
              {{- end }}
              {{- if $v.readOnly }}
              readOnly: true
              {{- end }}
            {{- end }}
            {{- end }}
            {{- if and .Values.config.enabled (eq .Values.config.mode "mount") }}
            - name: config
              mountPath: {{ .Values.config.mountPath }}
              subPath: config
              readOnly: true
            {{- end }}
          {{- end }}

      {{- if or .Values.config.enabled (and .Values.persistence.enabled $pvols) }}
      volumes:
        {{- if .Values.config.enabled }}
        - name: config
          configMap:
            name: {{ template "simple-node.confname" . }}
            defaultMode: 0600
        {{- end }}
        {{- if and .Values.persistence.enabled $pvols }}
        {{- range $v := $pvols }}
        {{- if $v.existingClaim }}
        - name: {{ $v.name }}
          persistentVolumeClaim:
            claimName: {{ $v.existingClaim }}
        {{- else if $v.emptyDir }}
        - name: {{ $v.name }}
          emptyDir: {{- toYaml $v.emptyDir | nindent 12 }}
        {{- end }}
        {{- end }}
        {{- end }}
      {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}

  {{- if and .Values.persistence.enabled $pvols }}
  volumeClaimTemplates:
    {{- range $v := $pvols }}
    {{- if and (not $v.existingClaim) (not $v.emptyDir) }}
    - metadata:
        name: {{ $v.name }}
        {{- with $v.annotations }}
        annotations:
{{ toYaml . | indent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- if $v.accessModes }}
{{ toYaml $v.accessModes | indent 10 }}
          {{- else }}
          - ReadWriteOnce
          {{- end }}
        {{- if $v.storageClass }}
        storageClassName: {{ $v.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ required (printf "persistence.volumes[%s].size is required for PVC creation" $v.name) $v.size }}
    {{- end }}
    {{- end }}
  {{- end }}
